########################################################
########################################################
InstallGlobalFunction(HomogeneousPolynomials,
function(G,n)
local M,module,fn,x,y,z;

if IsBound(G!.bianchiInteger) then
return HomogeneousPolynomials_Bianchi(G,n); fi;

x:=Indeterminate(Rationals,1);;
y:=Indeterminate(Rationals,2);;
z:=Indeterminate(Rationals,3);;

####################################
####################################
fn:=function(A)
local B,i,p,b,q,indet,k;
B:=[];

for i in [0..n] do
b:=[0..n]*0;
p:=x^(n-i)*y^i*z;
p:=Value(p,[x,y,z],[ A[2][2]*x-A[1][2]*y , -A[2][1]*x+A[1][1]*y , z]);
#p:=Value(p,[x,y,z],[ A[1][1]*x+A[1][2]*y , A[2][1]*x+A[2][2]*y , z]);
p:=p!.ExtRepPolynomialRatFun;
for k in [1..Length(p)/2] do
q:=p[2*k-1];
if Length(q)=3 then b[1+q[2]]:=p[2*k];
else
  if q[1]=1 then b[1+q[2]]:=p[2*k];
  else b[1]:=p[2*k]; fi;
fi;
od;
Add(B,b);
od;
return Reversed(TransposedMat(B));
end;
####################################
####################################

M:=Group( List(GeneratorsOfGroup(G),fn) );;
module:=GroupHomomorphismByFunction(G,M,x->fn(x));

return module;
end);
########################################################
########################################################
